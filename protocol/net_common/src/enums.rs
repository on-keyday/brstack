// Code generated by bm2rust of https://github.com/on-keyday/rebrgen
#[derive(Debug)]
pub enum Error {
    PropertySetterError(&'static str),
    IOError(&'static str, std::io::Error),
    TryFromIntError(std::num::TryFromIntError),
    ArrayLengthMismatch(&'static str,usize /*expected*/,usize /*actual*/),
    AssertError(&'static str),
    InvalidUnionVariant(&'static str),
    BackwardError(usize,usize),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::PropertySetterError(s) => write!(f, "PropertySetterError: {}", s),
            Error::IOError(s,e) => write!(f, "IOError: {} {}", s,e),
            Error::TryFromIntError(e) => write!(f, "TryFromIntError: {}", e),
            Error::ArrayLengthMismatch(s,expected,actual) => write!(f, "ArrayLengthMismatch: {} expected:{} actual:{}", s,expected,actual),
            Error::AssertError(s) => write!(f, "AssertError: {}", s),
            Error::InvalidUnionVariant(s) => write!(f, "InvalidUnionVariant: {}", s),
            Error::BackwardError(expected,actual) => write!(f, "BackwardError: expected:{} actual:{}", expected,actual),
        }
    }
}
impl std::error::Error for Error {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match self {
            Error::IOError(_,e) => Some(e),
            Error::TryFromIntError(e) => Some(e),
            Error::PropertySetterError(_) => None,
            Error::ArrayLengthMismatch(_,_,_) => None,
            Error::AssertError(_) => None,
            Error::InvalidUnionVariant(_) => None,
            Error::BackwardError(_,_) => None,
        }
    }
}
impl From<std::num::TryFromIntError> for Error {
    fn from(e: std::num::TryFromIntError) -> Self {
        Error::TryFromIntError(e)
    }
}
impl From<std::convert::Infallible> for Error {
    fn from(_: std::convert::Infallible) -> Self {
        unreachable!()
    }
}
/* Unimplemented op: IMMEDIATE_STRING */
#[derive(Debug,Default, Clone, Copy, PartialEq, Eq)]
pub enum NeighborCacheState {
    #[default]
    INCOMPLETE = 0,
    REACHABLE = 1,
    STALE = 2,
    DELAY = 3,
    PROBE = 4,
    FAILED = 5,
}
impl std::fmt::Display for NeighborCacheState {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match *self as usize {
            0 => write!(f, "{}", "INCOMPLETE"),
            1 => write!(f, "{}", "REACHABLE"),
            2 => write!(f, "{}", "STALE"),
            3 => write!(f, "{}", "DELAY"),
            4 => write!(f, "{}", "PROBE"),
            5 => write!(f, "{}", "FAILED"),
            _ => write!(f, "NeighborCacheState({})",*self as usize),
        }
    }
}
impl NeighborCacheState {
    pub fn is_known(&self) -> bool {
        match *self as usize {
            0 => true,
            1 => true,
            2 => true,
            3 => true,
            4 => true,
            5 => true,
            _ => false,
        }
    }
}
/* Unimplemented op: IMMEDIATE_STRING */
#[derive(Debug,Default, Clone, Copy, PartialEq, Eq)]
#[repr(u8)]
pub enum ICMPv4DstUnreachableCode {
    #[default]
    net_unreachable = 0,
    host_unreachable = 1,
    protocol_unreachable = 2,
    port_unreachable = 3,
    fragmentation_needed_but_df_set = 4,
    source_route_failed = 5,
    network_unknown = 6,
    host_unknown = 7,
    network_prohibited = 8,
    host_prohibited = 9,
    TOS_network_unreachable = 10,
    TOS_host_unreachable = 11,
    communication_prohibited = 12,
    host_precedence_violation = 13,
    precedence_cutoff = 14,
}
impl std::fmt::Display for ICMPv4DstUnreachableCode {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match *self as u8 {
            0 => write!(f, "{}", "net_unreachable"),
            1 => write!(f, "{}", "host_unreachable"),
            2 => write!(f, "{}", "protocol_unreachable"),
            3 => write!(f, "{}", "port_unreachable"),
            4 => write!(f, "{}", "fragmentation_needed_but_df_set"),
            5 => write!(f, "{}", "source_route_failed"),
            6 => write!(f, "{}", "network_unknown"),
            7 => write!(f, "{}", "host_unknown"),
            8 => write!(f, "{}", "network_prohibited"),
            9 => write!(f, "{}", "host_prohibited"),
            10 => write!(f, "{}", "TOS_network_unreachable"),
            11 => write!(f, "{}", "TOS_host_unreachable"),
            12 => write!(f, "{}", "communication_prohibited"),
            13 => write!(f, "{}", "host_precedence_violation"),
            14 => write!(f, "{}", "precedence_cutoff"),
            _ => write!(f, "ICMPv4DstUnreachableCode({})",*self as u8),
        }
    }
}
impl ICMPv4DstUnreachableCode {
    pub fn is_known(&self) -> bool {
        match *self as u8 {
            0 => true,
            1 => true,
            2 => true,
            3 => true,
            4 => true,
            5 => true,
            6 => true,
            7 => true,
            8 => true,
            9 => true,
            10 => true,
            11 => true,
            12 => true,
            13 => true,
            14 => true,
            _ => false,
        }
    }
}
impl std::convert::From<u8> for ICMPv4DstUnreachableCode {
    fn from(e: u8) -> Self {
        unsafe { std::mem::transmute(e) }
    }
}
impl std::convert::From<ICMPv4DstUnreachableCode> for u8 {
    fn from(e: ICMPv4DstUnreachableCode) -> Self {
        unsafe { std::mem::transmute(e) }
    }
}
#[derive(Debug,Default, Clone, Copy, PartialEq, Eq)]
#[repr(u8)]
pub enum ICMPv4TimeExceededCode {
    #[default]
    ttl_exceeded_in_transit = 0,
    fragment_reassembly_time_exceeded = 1,
}
impl std::fmt::Display for ICMPv4TimeExceededCode {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match *self as u8 {
            0 => write!(f, "{}", "ttl_exceeded_in_transit"),
            1 => write!(f, "{}", "fragment_reassembly_time_exceeded"),
            _ => write!(f, "ICMPv4TimeExceededCode({})",*self as u8),
        }
    }
}
impl ICMPv4TimeExceededCode {
    pub fn is_known(&self) -> bool {
        match *self as u8 {
            0 => true,
            1 => true,
            _ => false,
        }
    }
}
impl std::convert::From<u8> for ICMPv4TimeExceededCode {
    fn from(e: u8) -> Self {
        unsafe { std::mem::transmute(e) }
    }
}
impl std::convert::From<ICMPv4TimeExceededCode> for u8 {
    fn from(e: ICMPv4TimeExceededCode) -> Self {
        unsafe { std::mem::transmute(e) }
    }
}
/* Unimplemented op: IMMEDIATE_STRING */
/* Unimplemented op: METADATA */
/* Unimplemented op: IMMEDIATE_STRING */
/* Unimplemented op: METADATA */
