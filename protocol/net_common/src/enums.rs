// Code generated by bm2rust of https://github.com/on-keyday/rebrgen
#[derive(Debug)]
pub enum Error {
    PropertySetterError(&'static str),
    IOError(&'static str, std::io::Error),
    TryFromIntError(std::num::TryFromIntError),
    ArrayLengthMismatch(&'static str,usize /*expected*/,usize /*actual*/),
    AssertError(&'static str),
    InvalidUnionVariant(&'static str),
    BackwardError(usize,usize),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::PropertySetterError(s) => write!(f, "PropertySetterError: {}", s),
            Error::IOError(s,e) => write!(f, "IOError: {} {}", s,e),
            Error::TryFromIntError(e) => write!(f, "TryFromIntError: {}", e),
            Error::ArrayLengthMismatch(s,expected,actual) => write!(f, "ArrayLengthMismatch: {} expected:{} actual:{}", s,expected,actual),
            Error::AssertError(s) => write!(f, "AssertError: {}", s),
            Error::InvalidUnionVariant(s) => write!(f, "InvalidUnionVariant: {}", s),
            Error::BackwardError(expected,actual) => write!(f, "BackwardError: expected:{} actual:{}", expected,actual),
        }
    }
}
impl std::error::Error for Error {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match self {
            Error::IOError(_,e) => Some(e),
            Error::TryFromIntError(e) => Some(e),
            Error::PropertySetterError(_) => None,
            Error::ArrayLengthMismatch(_,_,_) => None,
            Error::AssertError(_) => None,
            Error::InvalidUnionVariant(_) => None,
            Error::BackwardError(_,_) => None,
        }
    }
}
impl From<std::num::TryFromIntError> for Error {
    fn from(e: std::num::TryFromIntError) -> Self {
        Error::TryFromIntError(e)
    }
}
impl From<std::convert::Infallible> for Error {
    fn from(_: std::convert::Infallible) -> Self {
        unreachable!()
    }
}
/* Unimplemented op: IMMEDIATE_STRING */
#[derive(Debug,Default, Clone, Copy, PartialEq, Eq)]
pub enum NeighborCacheState {
    #[default]
    INCOMPLETE = 0,
    REACHABLE = 1,
    STALE = 2,
    DELAY = 3,
    PROBE = 4,
    FAILED = 5,
}
impl std::fmt::Display for NeighborCacheState {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match *self as usize {
            0 => write!(f, "{}", "INCOMPLETE"),
            1 => write!(f, "{}", "REACHABLE"),
            2 => write!(f, "{}", "STALE"),
            3 => write!(f, "{}", "DELAY"),
            4 => write!(f, "{}", "PROBE"),
            5 => write!(f, "{}", "FAILED"),
            _ => write!(f, "NeighborCacheState({})",*self as usize),
        }
    }
}
impl NeighborCacheState {
    pub fn is_known(&self) -> bool {
        match *self as usize {
            0 => true,
            1 => true,
            2 => true,
            3 => true,
            4 => true,
            5 => true,
            _ => false,
        }
    }
}
/* Unimplemented op: IMMEDIATE_STRING */
/* Unimplemented op: METADATA */
