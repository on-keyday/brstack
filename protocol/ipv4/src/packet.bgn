format IPv4Header:
    version :u4 ihl :u4 dscp :u6 ecn :u2 len :u16
    id :u16 reserved :u1 dont_fragment :u1 more_fragment :u1 fragOffset :u13
    ttl :u8 proto :ProtocolNumber checksum :u16
    src_addr :[4]u8
    dst_addr :[4]u8
    ihl >= 5
    options :[u8(ihl)*4-20]u8

format IPv4Packet:
    hdr :IPv4Header
    hdr.len >= u16(hdr.ihl)*4
    len ::= hdr.len - u16(hdr.ihl*4) 
    data :[len]u8



enum ProtocolNumber:
    :u8
    ICMP = 1
    TCP = 6
    UDP = 17

fn checkSum(data :[]u8) -> u16:
    sum := u32(0)
    for i in data.length / 2:
        sum += u32(data[i*2]) << 8 | u32(data[i*2+1])
    if data.length % 2 == 1:
        sum += u32(data[data.length-1]) << 8
    for sum > 0xffff:
        sum = (sum & 0xffff) + (sum >> 16)
    return u16(!sum) # bit not(Rust方式)

format IPv4PseudoHeader:
    srcAddr :[4]u8
    dstAddr :[4]u8
    zero :u8
    protocol :ProtocolNumber
    length :u16


state CheckSum:
    sum :u32
    has_prev :bool
    prev :u8

fn checkSumUpdate(s :CheckSum,data :[]u8) -> CheckSum:
    p := s
    sum := p.sum
    if data.length == 0:
        return p
    if p.has_prev:
        sum += u32(p.prev) << 8 | u32(data[0])
        for i in (data.length - 1) / 2:
            sum += u32(data[(i*2)+1]) << 8 | u32(data[(i*2)+2])
        if (data.length - 1) % 2 != 0:
            p.prev = data[data.length-1]
            p.has_prev = true
    else:
        for i in data.length / 2:
            sum += u32(data[i*2]) << 8 | u32(data[(i*2)+1])
        if data.length % 2 != 0:
            p.prev = data[data.length-1]
            p.has_prev = true
    return p

fn checkSumFinish(s :CheckSum) -> u16:
    p := s
    sum := p.sum
    if p.has_prev:
        sum += u32(p.prev) << 8
    for sum > 0xffff:
        sum = (sum & 0xffff) + (sum >> 16)
    return u16(!sum) # bit not(Rust方式)
